"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseGameDetail = exports.parseGameResults = exports.parseQuery = void 0;
var cheerio_1 = __importDefault(require("cheerio"));
var howlongtobeat_json_1 = require("./howlongtobeat.json");
var types_1 = require("./types");
/*
 * Regular expresions to extract relative times on searching
 */
var REGEX = {
    TOTAL_FOUND: /We Found (?<total>\d+) Games/i,
    GAMEPLAY_MAIN: /(MainStory|Solo)(?<hours>\d+½?Hours)?(?<mins>\d+Mins)?/i,
    GAMEPLAY_EXTENDED: /(Main\+Extra)(?<hours>\d+½?Hours)?(?<mins>\d+Mins)?/i,
    GAMEPLAY_COMPLETIONIST: /(Completionist)(?<hours>\d+½?Hours)?(?<mins>\d+Mins)?/i,
    GAMEPLAY_MULTI: /(Vs\.)(?<hours>\d+½?Hours)?(?<mins>\d+Mins)?/i
};
function parseTotalResults(regex, s) {
    var found = regex.exec(s);
    return parseInt((found && found.pop()) || '0');
}
function parseRelativeTimes(regex, s) {
    // Clean string and execute regular expresion
    var found = regex.exec(s.replace(/(\s|\t|\n)+/g, ''));
    // Extract matched groups
    var _a = (found && found['groups']) || {}, hours = _a.hours, mins = _a.mins;
    // Parse results and return
    return (parseFloat((hours && hours.replace('Hours', '').replace('½', '.5')) || '0') +
        parseInt((mins && mins.replace('Mins', '')) || '0') / 60.0);
}
function parseTableTimes(table, rows) {
    var _a;
    var name = 'unknown';
    var fields = [];
    var values = [];
    // Set field names by table name
    switch (table) {
        case 'Single-Player':
            name = 'single';
            fields = types_1.SINGLE_PLAYER_FIELDS;
            break;
        case 'Multi-Player':
            name = 'multi';
            fields = types_1.MULTI_PLAYER_FIELDS;
            break;
        case 'Additional Content':
            name = 'dlc';
            fields = types_1.RELATED_CONTENT_FIELDS;
            break;
        case 'Main Game':
            name = 'mainGame';
            fields = types_1.RELATED_CONTENT_FIELDS;
            break;
        case 'Speedrun':
            name = 'speedrun';
            fields = types_1.SPEEDRUN_FIELDS;
            break;
        case 'Platform':
            name = 'platforms';
            fields = types_1.PLATFORM_FIELDS;
            break;
    }
    // Iterate over values
    rows.forEach(function (row) {
        var gameplay = {};
        fields.forEach(function (field, index) {
            if (row[index] !== '--')
                gameplay[field] = row[index];
        });
        values.push(gameplay);
    });
    return _a = {}, _a[name] = values, _a;
}
function parseQuery(query) {
    if (query === void 0) { query = {}; }
    var params = new URLSearchParams();
    params.append('queryString', query.search || '');
    params.append('t', 'games');
    params.append('sorthead', query.sortBy || types_1.SortBy.MostPopular);
    params.append('sortd', "" + (query.sortOrder || types_1.SortOrder.Descending));
    params.append('plat', query.platform || types_1.Platform.All);
    params.append('length_type', query.lengthType || types_1.LengthType.Main);
    params.append('length_min', query.lengthMin || '');
    params.append('length_max', query.lengthMax || '');
    params.append('v', query.perspective || types_1.Perspective.All);
    params.append('f', query.flow || types_1.Flow.All);
    params.append('g', query.genre || types_1.Genre.All);
    params.append('detail', query.modifier || types_1.Modifier.None);
    params.append('randomize', query.randomize ? '1' : '0');
    return params.toString();
}
exports.parseQuery = parseQuery;
function parseGameResults(html) {
    var data = [];
    var total = 0;
    var $ = cheerio_1.default.load(html);
    // Check if any results found
    if ($('.global_padding > h3').text()) {
        // Get total data for pagination
        total = parseTotalResults(REGEX.TOTAL_FOUND, $('.global_padding > h3').text());
        // Iterate over results
        $('ul li').each(function () {
            var id = parseInt($(this)
                .find('.search_list_details h3 a')
                .first()
                .attr()
                .href.split('=')
                .pop() || '0');
            var name = $(this)
                .find('.search_list_details h3 a')
                .text()
                .trim();
            var imageUrl = $(this)
                .find('.search_list_image img')
                .first()
                .attr().src;
            var times = $(this)
                .find('.search_list_details')
                .text();
            // Extract times with regular expressions
            var gameplays = [
                ['gameplayMain', parseRelativeTimes(REGEX.GAMEPLAY_MAIN, times)],
                [
                    'gameplayExtended',
                    parseRelativeTimes(REGEX.GAMEPLAY_EXTENDED, times)
                ],
                [
                    'gameplayCompletionist',
                    parseRelativeTimes(REGEX.GAMEPLAY_COMPLETIONIST, times)
                ],
                ['gameplayMulti', parseRelativeTimes(REGEX.GAMEPLAY_MULTI, times)]
            ];
            // Filter empty gameplays
            var filtered = {};
            gameplays.filter(function (_a) {
                var k = _a[0], v = _a[1];
                return v;
            }).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                return (filtered[k] = v);
            });
            // Save result
            data.push(__assign({ id: id, name: name, imageUrl: imageUrl ? "" + howlongtobeat_json_1.BASE_URL + imageUrl : '' }, filtered));
        });
    }
    return { total: total, data: data };
}
exports.parseGameResults = parseGameResults;
function parseGameDetail(html) {
    var $ = cheerio_1.default.load(html);
    var $main = $('#global_site > .contain_out.back_blue');
    var $metadata = $('#global_site .profile_info');
    var $tables = $('#global_site table');
    // Basic required data
    var id = parseInt($main
        .find('.profile_nav ul li a')
        .first()
        .attr()
        .href.split('=')
        .pop() || '0');
    var name = $main
        .find('.profile_header_game > .profile_header')
        .text()
        .trim();
    var description = $metadata
        .first()
        .text()
        .replace('...Read More', '')
        .trim();
    var imageUrl = $main.find('.game_image img').attr().src;
    // Fail on empty data
    if (!id && !name)
        throw new Error("Couldn't parse data from given HTML");
    // Stats
    var stats = {};
    $main.find('.profile_header_game > .profile_details ul li').each(function () {
        var _a = $(this)
            .text()
            .trim()
            .split(' '), value = _a[0], name = _a[1];
        if (name === 'Retired' || name === 'Rating') {
            stats[name.toLowerCase()] = parseInt(value.replace('%', '') || '0') / 100;
        }
        else {
            stats[name.toLowerCase()] = value;
        }
    });
    // Optional metadata
    var metadata = {};
    var releaseDates = {};
    $metadata.each(function () {
        var key = $(this)
            .find('strong')
            .text()
            .trim();
        var value = ($(this)
            .text()
            .split(key)
            .pop() || '').trim();
        switch (key) {
            case 'Platforms:':
            case 'Platform:':
                metadata.platforms = value.split(', ');
                break;
            case 'Genres:':
            case 'Genre:':
                metadata.genres = value.split(', ');
                break;
            case 'Developers:':
            case 'Developer:':
                metadata.developers = value.split(', ');
                break;
            case 'Publishers:':
            case 'Publisher:':
                metadata.publisher = value.split(', ');
                break;
            case 'NA:':
            case 'EU:':
            case 'JP:':
                releaseDates[key.replace(':', '')] = value;
                break;
        }
    });
    // Parse time tables
    var gameplays = {};
    $tables.each(function () {
        // Get table name
        var tableName = $(this)
            .find('thead tr td')
            .first()
            .text()
            .trim();
        var rows = [];
        // Iterate over rows
        $(this)
            .find('tbody tr')
            .each(function () {
            var row = [];
            // Iterate over cells
            $(this)
                .find('td')
                .each(function () {
                row.push($(this)
                    .text()
                    .trim());
            });
            rows.push(row);
        });
        // Transform arrays to object with named fields
        Object.assign(gameplays, parseTableTimes(tableName, rows));
    });
    return __assign(__assign({ id: id, name: name, description: description, imageUrl: imageUrl ? "" + howlongtobeat_json_1.BASE_URL + imageUrl : '', stats: stats }, metadata), { releaseDates: releaseDates, gameplays: gameplays });
}
exports.parseGameDetail = parseGameDetail;
//# sourceMappingURL=parsers.js.map